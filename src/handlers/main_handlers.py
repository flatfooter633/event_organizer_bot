import asyncio

from aiogram import types, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy import select

from src.config.logger_config import logger
from src.database.database import get_db
from src.database.models import User, Event, Registration, Answer, Question, SystemSetting
from src.database.models import (
    get_cached_event_by_id,
    get_cached_active_events,
    get_cached_questions,
)
from src.keyboards.keyboards import (
    get_registration_confirmation_kb,
    active_events_kb,
    digits_keyboard,
    events_keyboard,
    admin_keyboard,
    commands_keyboard,
)
from src.states.states import RegistrationForm

router = Router()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def get_video_file_id():
    async with get_db() as session:
        return await SystemSetting.get_setting_cached(session, "VIDEO_FILE_ID", "")


async def get_admin_commands_text():
    async with get_db() as session:
        return await SystemSetting.get_setting_cached(
            session, "ADMIN_COMMANDS_TEXT", ""
        )


async def get_start_message():
    async with get_db() as session:
        return await SystemSetting.get_setting_cached(session, "START_MESSAGE", "")


async def get_welcome_message():
    async with get_db() as session:
        return await SystemSetting.get_setting_cached(session, "WELCOME_MESSAGE", "")


def log_user_action(user_id: int, action: str, his: bool = False):
    logger.info(f"{"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if not his else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"}  {user_id} {action}")


async def async_log_user_action(user_id: int, action: str, his: bool = False):
    await asyncio.to_thread(
        log_user_action,
        user_id,
        action,
        his=his,
    )


# ---------------------------------------------------------
# region Command("start")
# ---------------------------------------------------------
@router.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    await async_log_user_action(user_id, "–∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start", his=False)

    async with get_db() as session:
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        user = await User.add_user(
            session,
            user_id,
            message.from_user.first_name,
            message.from_user.last_name,
        )

        is_admin = user.is_admin  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        await async_log_user_action(
            user_id,
            f"–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω-–ø—Ä–∞–≤: {'–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin else '–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}.",
            his=False,
        )

    text = f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{user_name}</b>!\n\n"
    if is_admin:
        text += "–í–∞—à —Å—Ç–∞—Ç—É—Å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n\n"
        text += await get_admin_commands_text()
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        await message.answer(text, parse_mode="HTML", reply_markup=admin_keyboard)
        await async_log_user_action(
            user_id,
            "–ø–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥.",
            his=True,
        )

    else:
        # –ü–æ–ª—É—á–∞–µ–º ID –≤–∏–¥–µ–æ –∏–∑ –±–∞–∑—ã –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        video_id = await get_video_file_id()

        await message.answer_video(
            video=video_id,
            caption="",
        )

        text += await get_start_message()
        await message.answer(text, parse_mode="HTML", reply_markup=events_keyboard)
        welcome_message = await get_welcome_message()
        await message.answer(
            welcome_message, parse_mode="HTML", reply_markup=digits_keyboard
        )

        await async_log_user_action(
            user_id, "–ø–æ–∫–∞–∑–∞–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", his=True
        )


@router.message(Command("give_my_id"))
async def give_my_id(message: Message):
    user_id = message.from_user.id
    await async_log_user_action(
        user_id, f"–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /give_my_id. –ó–∞–ø—Ä–æ—à–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", his=False
    )

    await message.answer(f"–í–∞—à ID: {user_id}")


@router.message(F.text.lower() == "–∫–æ–º–∞–Ω–¥—ã")
async def send_commands_inline(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=commands_keyboard)


@router.callback_query(F.data.startswith("digit_"))
async def process_digit(callback: CallbackQuery):
    digit = callback.data.split("_")[-1]
    user_name = callback.from_user.first_name
    user_id = callback.from_user.id
    await async_log_user_action(user_id, f"–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É {digit}", his=False)

    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é –∑–∞ –≤—ã–±–æ—Ä
    await callback.answer(f"–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å, {user_name}!", show_alert=True)

    # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.delete()

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
    await offer_active_events(callback.message)


@router.message(F.text == "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def handle_events_button(message: types.Message):
    await message.delete()
    await async_log_user_action(
        message.from_user.id, f"–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {message.text}", his=False
    )

    # –í—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    await offer_active_events(message)


async def offer_active_events(message: Message):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    user_id = (message.from_user.id,)
    await async_log_user_action(
        user_id[0], "–∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", his=False
    )
    async with get_db() as session:
        events = await get_cached_active_events(session)

        if events:
            await message.answer(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
                reply_markup=active_events_kb(events),
            )

            await async_log_user_action(
                user_id[0],
                f"–ø–æ–ª—É—á–∏–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤—Å–µ–≥–æ: {len(events)}).",
                his=False,
            )
        else:
            await message.answer("–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")

            await async_log_user_action(
                user_id[0],
                "–ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.",
                his=False,
            )


# endregion
# ---------------------------------------------------------


# ---------------------------------------------------------
# region RegistrationForm(StatesGroup)
# ---------------------------------------------------------
async def ask_question(message: Message, state: FSMContext, questions, question_index):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å"""
    user_id = message.from_user.id
    if question_index < len(questions):
        await state.update_data(current_question_index=question_index)
        question_text = questions[question_index].question_text
        await message.answer(question_text)

        await async_log_user_action(
            user_id,
            f"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å: '{question_text}' (–∏–Ω–¥–µ–∫—Å {question_index})",
            his=True,
        )
        await state.set_state(RegistrationForm.DYNAMIC_QUESTION)
    else:
        # –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        data = await state.get_data()
        event_id = data["event_id"]

        await async_log_user_action(
            user_id,
            "–∑–∞–≤–µ—Ä—à–∏–ª –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞–µ–º —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            his=False,
        )
        async with get_db() as session:
            reg = Registration(user_id=user_id, event_id=event_id)
            session.add(reg)
            # await session.commit()

            await async_log_user_action(
                user_id, f"—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (Event ID: {event_id})", his=True
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤ –ë–î
            answers = [
                Answer(
                    registration_user_id=reg.user_id,
                    registration_event_id=reg.event_id,
                    question_id=data["questions"][idx],
                    answer_text=answer_text,
                )
                for idx, answer_text in enumerate(data["answers"])
            ]
            session.add_all(answers)
            await session.commit()

            await async_log_user_action(
                user_id, f"–¥–æ–±–∞–≤–ª–µ–Ω—ã –û—Ç–≤–µ—Ç—ã –≤ –ë–î: {len(answers)}", his=True
            )
            video_id = await Event.get_welcome_video(session, data["event_id"])

        if video_id:
            await message.answer("–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–≤–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ:")
            await message.bot.send_video(
                chat_id=user_id,
                video=video_id,
                caption="–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!",
            )

            await async_log_user_action(
                user_id, "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", his=True
            )
        else:
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")

            await async_log_user_action(
                user_id,
                "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–±–µ–∑ –≤–∏–¥–µ–æ)",
                his=True,
            )
        await message.answer("üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await state.clear()


# —Å—Ç–∞—Ä—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∞–Ω–∫–µ—Ç—ã:
@router.callback_query(lambda c: c.data.startswith("register_"))
async def event_description(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    await async_log_user_action(
        user_id, f"–∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å ID {event_id}", his=False
    )
    async with get_db() as session:
        event = await get_cached_event_by_id(session, event_id)
        if not event:
            logger.warning(
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
            )
            await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        await callback.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ID: {event_id}")

        description = event.description
        date = event.event_date.strftime("%d.%m.%Y –≤ %H:%M")

        text = (
            f"üìå <b>{event.name}</b>\n\n"
            f"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {date}\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{description}</i>\n\n"
            "<b>–•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?</b>"
        )

        await callback.message.edit_text(
            text,
            reply_markup=get_registration_confirmation_kb(event_id),
            parse_mode="HTML",
        )

        await async_log_user_action(
            user_id, f"–ø–æ–∫–∞–∑–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å ID {event_id}", his=True
        )


@router.callback_query(lambda c: c.data == "confirm_no")
async def confirm_no(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await async_log_user_action(
        user_id, f"–æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", his=False
    )

    async with get_db() as session:
        events = await get_cached_active_events(session)

        if events:
            await callback.message.edit_text(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
                reply_markup=active_events_kb(events),
            )
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
            await async_log_user_action(
                user_id, f"—Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", his=True
            )
        else:
            await callback.message.edit_text(
                "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."
            )
            await callback.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç.")
            await async_log_user_action(
                user_id, f"—Å–æ–æ–±—â–µ–Ω–æ –æ —Ç–æ–º, —á—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç.", his=True
            )


@router.callback_query(lambda c: c.data.startswith("confirm_yes_"))
async def confirm_yes(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    await async_log_user_action(
        user_id, f"–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ —Å ID {event_id}", his=False
    )

    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤:")

    await callback.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ID: ¬´{event_id}¬ª.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤."
    )

    async with get_db() as session:
        existing_registration = await session.scalar(
            select(Registration).where(
                Registration.user_id == user_id, Registration.event_id == event_id
            )
        )
        event = await get_cached_event_by_id(session, event_id)
        if existing_registration:

            await async_log_user_action(
                user_id,
                f"—É–∂–µ –±—ã–ª —Ä–∞–Ω–µ–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ¬´{event.name}¬ª ID {event_id}",
                his=False,
            )

            await callback.message.edit_text(
                f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n\n"
                f"¬´{event.name}¬ª\n\n"
                f"üìÖ –î–∞—Ç–∞: {event.event_date.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            )
            return

        questions = await Question.get_questions(session, event_id)

        # –ü—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
        if not questions:
            logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ID {event_id}")

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É
            registration = Registration(event_id=event_id, user_id=user_id)
            session.add(registration)
            await session.commit()
            await async_log_user_action(
                user_id,
                f"—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ID {event_id} (–±–µ–∑ –∞–Ω–∫–µ—Ç—ã)",
                his=False,
            )

            # –ó–∞–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await callback.message.edit_text(
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n\n"
                f"¬´{event.name}¬ª\n\n"
                f"üìÖ –î–∞—Ç–∞: {event.event_date.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            )
            await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return

        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –µ—Å—Ç—å ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∫–µ—Ç—É
        await state.update_data(
            event_id=event_id, questions=[q.id for q in questions], answers=[]
        )
        await async_log_user_action(
            user_id,
            f"–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã –∏–∑ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ID {event_id}",
            his=True,
        )

        await callback.answer(f"–ê–Ω–∫–µ—Ç–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
        await ask_question(callback.message, state, questions, 0)


# —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:
@router.message(RegistrationForm.DYNAMIC_QUESTION)
async def handle_dynamic_question(message: Message, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("current_question_index", 0)

    # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç –≤ –º–∞—Å—Å–∏–≤
    answers = data.get("answers", [])
    answers.append(message.text)
    await state.update_data(answers=answers)

    async with get_db() as session:
        questions = await get_cached_questions(session, data["event_id"])

    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await ask_question(message, state, questions, current_index + 1)


# endregion
# ---------------------------------------------------------
