import io
from collections import defaultdict
from datetime import datetime
from typing import Union

import pandas as pd
from aiogram import Bot, types, F, Router
from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramRetryAfter,
    TelegramNetworkError,
)
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram_calendar.dialog_calendar import (
    DialogCalendarCallback,
    DialogCalendar,
    DialogCalAct,
)

from src.config.logger_config import logger
from src.database.database import get_db
from src.database.models import User, Event, Registration, Answer, Question, SystemSetting, BroadcastQueue
from src.database.models import (
    get_cached_event_by_id,
    get_cached_active_events,
    get_cached_questions,
    clear_event_from_cache,
    clear_all_cache,
    check_admin_cached,
)
from src.keyboards.keyboards import (
    get_events_kb,
    active_events_kb,
    get_broadcast_confirmation_kb,
    get_cancel_confirmation_kb,
    create_question_keyboard,
    create_time_keyboard,
    edit_setting_keyboard,
)
from src.states.states import (
    AddEvent,
    ViewRegistrations,
    AddQuestionsToEvent,
    AddAdmin,
    AdminAuth,
    CancelEvent,
    ExportAnswers,
    ChangePassword,
    BroadcastMessage,
    SetWelcomeVideo,
    EditQuestions,
    AdminStates,
)
from src.utils.scheduler import notify_admins

router = Router()


async def notify_all_users(bot: Bot, event: Event):
    async with get_db() as session:
        users = await User.get_all_users(session)
        events = await get_cached_active_events(session)

    for user_id in users:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=(
                    f"‚ö†Ô∏è <b>–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> {event.name}\n\n"
                    f"<i>{event.description}</i>\n\n"
                    f"üìÖ <b>–î–∞—Ç–∞:</b> {event.event_date.strftime('%d.%m.%Y %H:%M')}\n\n"
                    "üëáüèº –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ! üëáüèº"
                ),
                parse_mode="HTML",
                reply_markup=active_events_kb(events),
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# ---------------------------------------------------------
# region AdminAuth(StatesGroup)
# ---------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_callback_command(command, message, state):
    commands_map = {
        "broadcast": broadcast,
        "add_event": add_event,
        "cancel_event": cancel_event,
        "edit_questions": edit_questions,
        "set_welcome_video": set_welcome_video,
        "export_answers": export_answers,
        "view_registrations": view_registrations,
        "add_admin": add_admin,
        "change_password": change_password,
        "edit_settings": edit_settings,
    }
    command_handler = commands_map.get(command)
    if command_handler:
        await command_handler(message, state)
    else:
        await message.answer("üö´ Callback-–∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥, –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def handle_text_command(command, message, state):
    commands_map = {
        "/add_event": add_event,
        "/cancel_event": cancel_event,
        "/broadcast": broadcast,
        "/edit_questions": edit_questions,
        "/add_admin": add_admin,
        "/change_password": change_password,
        "/set_welcome_video": set_welcome_video,
        "/export_answers": export_answers,
        "/view_registrations": view_registrations,
        "/edit_settings": edit_settings,
    }
    command_handler = commands_map.get(command)
    if command_handler:
        await command_handler(message, state)
    else:
        await message.answer("üö´ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–æ–º–∞–Ω–¥—ã.")


@router.message(AdminAuth.password, F.text)
async def check_admin_password(message: Message, state: FSMContext):
    async with get_db() as session:
        user = await session.get(User, message.from_user.id)

        if user and user.verify_password(message.text):
            data = await state.get_data()
            original_command = data.get("original_command")
            original_callback = data.get("original_callback")

            await state.clear()

            if original_callback and original_callback.startswith("command_"):
                command = original_callback.split("command_")[1]
                await handle_callback_command(command, message, state)
                await message.delete()
                return

            if original_command:
                command = original_command.split()[0]
                await handle_text_command(command, message, state)
                await message.delete()
            else:
                await message.answer(
                    "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
                )
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")


# endregion
# ---------------------------------------------------------


@router.callback_query(F.data.startswith("command_"))
async def command_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    command = callback.data.split("command_")[1]

    if command == "broadcast":
        await broadcast(callback.message, state)

    elif command == "add_event":
        await add_event(callback.message, state)

    elif command == "cancel_event":
        await cancel_event(callback.message, state)

    elif command == "edit_questions":
        await edit_questions(callback.message, state)

    elif command == "set_welcome_video":
        await set_welcome_video(callback.message, state)

    elif command == "export_answers":
        await export_answers(callback.message, state)

    elif command == "view_registrations":
        await view_registrations(callback.message, state)

    elif command == "add_admin":
        await add_admin(callback.message, state)

    elif command == "change_password":
        await change_password(callback.message, state)

    elif command == "edit_settings":
        await edit_settings(callback, state)

    await callback.answer()  # —É–±–∏—Ä–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∫–Ω–æ–ø–∫–∏


# ---------------------------------------------------------
# region Command("edit_settings")
# ---------------------------------------------------------
@router.message(Command("edit_settings"))
async def edit_settings(
    message_or_callback: Union[Message, types.CallbackQuery], state: FSMContext
):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ö–æ–¥—è—â–∏–π –æ–±—ä–µ–∫—Ç callback'–æ–º –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if isinstance(message_or_callback, types.CallbackQuery):
        first_name = message_or_callback.from_user.first_name
        message = message_or_callback.message
    else:
        first_name = message_or_callback.from_user.first_name
        message = message_or_callback

    await message.answer(
        f"{first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=edit_setting_keyboard,
    )


@router.callback_query(F.data.startswith("edit_setting_"))
async def begin_edit_setting(query: types.CallbackQuery, state: FSMContext):
    setting_key = query.data.replace("edit_setting_", "")
    user_id = query.from_user.id
    async with get_db() as session:
        admin = await check_admin_cached(session, user_id)

    if not admin:
        await query.message.delete()
        await query.answer(f"üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    async with get_db() as session:
        setting = await SystemSetting.get_setting(session, setting_key, "")

    await state.update_data(edit_setting_key=setting_key)
    await query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '{setting_key}'")
    if setting_key == "VIDEO_FILE_ID" and setting:

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        await query.message.delete()
        await query.message.answer_video(
            video=setting,
            caption="‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ\n\n"
                    "üñä –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
        )
        await state.set_state(AdminStates.edit_video_setting)
    else:
        await state.set_state(AdminStates.edit_setting)
        await query.message.edit_text(
            f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '{setting_key}':\n\n"
            f"üîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩ\n\n"
            f"{setting}\n\n"
            f"üîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩ\n\n"
            f"üñä –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
        )

@router.message(AdminStates.edit_video_setting)
async def save_video_setting(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await state.clear()
        await message.delete()
        await message.answer("‚ö†Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    if not message.video:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return

    data = await state.get_data()
    setting_key = data.get("edit_setting_key")

    # –ü–æ–ª—É—á–∞–µ–º file_id –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    video_file_id = message.video.file_id

    async with get_db() as session:
        await SystemSetting.set_setting(session, setting_key, video_file_id)

    await message.answer(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()


@router.message(AdminStates.edit_setting)
async def save_setting(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await state.clear()
        await message.delete()
        await message.answer("‚ö†Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    data = await state.get_data()
    setting_key = data.get("edit_setting_key")

    async with get_db() as session:
        await SystemSetting.set_setting(session, setting_key, message.text)

    await message.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{setting_key}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await state.clear()



# endregion
# ---------------------------------------------------------


# ---------------------------------------------------------
# region AddEvent(StatesGroup)
# ---------------------------------------------------------
@router.message(Command("add_event"))
async def add_event(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(AddEvent.name)


@router.message(AddEvent.name)
async def event_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    logger.info(
        f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {message.text}"
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    await state.set_state(AddEvent.description)


@router.message(AddEvent.description)
async def event_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=await DialogCalendar(
            locale="ru_RU", show_alerts=True
        ).start_calendar(),
    )

    await state.set_state(AddEvent.choosing_date)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@router.callback_query(DialogCalendarCallback.filter(), AddEvent.choosing_date)
async def process_date_selection(
    callback: types.CallbackQuery,
    callback_data: DialogCalendarCallback,
    state: FSMContext,
):
    calendar = DialogCalendar(locale="ru_RU", show_alerts=True)
    selected, date_value = await calendar.process_selection(callback, callback_data)

    # –ï—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã, –º–µ—Ç–æ–¥ process_selection –≤–µ—Ä–Ω–µ—Ç (False, None),
    # –∏ –ø—Ä–∏ —ç—Ç–æ–º —É–¥–∞–ª–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    if callback_data.act == DialogCalAct.cancel:
        await state.clear()
        await callback.message.edit_text("üö´ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.answer("üö´ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", show_alert=True)
        return

    if selected:
        if date_value:
            await state.update_data(selected_date=date_value)

            await callback.message.edit_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date_value.strftime('%d.%m.%Y')}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
                reply_markup=create_time_keyboard(),
            )

            await state.set_state(AddEvent.choosing_time)
    else:
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞, –Ω–æ —ç—Ç–æ –Ω–µ –æ—Ç–º–µ–Ω–∞ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
        await callback.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"
            if callback_data.act != DialogCalAct.cancel
            else None
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
@router.callback_query(F.data.startswith("time_"), AddEvent.choosing_time)
async def process_time_selection(callback: types.CallbackQuery, state: FSMContext):
    time_str = callback.data.split("_")[1]
    try:
        selected_time = datetime.strptime(time_str, "%H:%M").time()
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
        return

    data = await state.get_data()
    selected_date = data["selected_date"]
    full_datetime = datetime.combine(selected_date, selected_time)
    await state.update_data(date=full_datetime)
    logger.info(
        f"–ê–¥–º–∏–Ω {callback.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏: {full_datetime.strftime('%Y-%m-%d %H:%M')}"
    )

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {full_datetime.strftime('%Y-%m-%d %H:%M')}\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):"
    )
    await state.set_state(AddEvent.question)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
@router.message(AddEvent.choosing_time)
async def process_manual_time_input(message: types.Message, state: FSMContext):
    try:
        selected_time = datetime.strptime(message.text, "%H:%M").time()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        return

    data = await state.get_data()
    selected_date = data["selected_date"]
    full_datetime = datetime.combine(selected_date, selected_time)
    await state.update_data(date=full_datetime)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {full_datetime.strftime('%Y-%m-%d %H:%M')}")
    logger.info(
        f"–ê–¥–º–∏–Ω {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {full_datetime.strftime('%Y-%m-%d %H:%M')}"
    )

    await message.answer(
        f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{data.get('name')}' –¥–æ–±–∞–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):"
    )
    await state.set_state(AddEvent.question)


@router.message(AddEvent.question, Command("done"))
async def finish_questions(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    async with get_db() as session:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        event = await Event.add_event(
            session, data["name"], data["description"], data["date"]
        )

        questions = data.get("questions", [])
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –º–µ—Ç–æ–¥–∞ create
        for order, question_text in enumerate(questions, start=1):
            question = Question(
                event_id=event.id,
                question_text=question_text,
                order=order,
            )
            session.add(question)

        await session.commit()
        clear_all_cache()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    await notify_all_users(bot, event)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –≤–æ–ø—Ä–æ—Å—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã! ‚úÖ")
    await state.clear()


MAX_QUESTIONS = 5  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤


@router.message(AddEvent.question, F.text)
async def add_question(message: Message, state: FSMContext):
    data = await state.get_data()
    questions = data.get("questions", [])

    if len(questions) >= MAX_QUESTIONS:
        await message.answer(
            f"üî¥ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî {MAX_QUESTIONS}. "
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
        )
        return

    questions.append(message.text)

    await state.update_data(questions=questions)

    if len(questions) < MAX_QUESTIONS:
        await message.answer(
            f"‚úÖ –í–æ–ø—Ä–æ—Å ({len(questions)}/{MAX_QUESTIONS}) –¥–æ–±–∞–≤–ª–µ–Ω! –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done."
        )
    else:
        await message.answer(
            f"‚úÖ –í–æ–ø—Ä–æ—Å ({len(questions)}/{MAX_QUESTIONS}) –¥–æ–±–∞–≤–ª–µ–Ω. "
            "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ."
        )


# endregion
# ---------------------------------------------------------


# ---------------------------------------------------------
# region EditQuestions(StatesGroup)
# ---------------------------------------------------------
@router.message(Command("edit_questions"))
async def edit_questions(message: Message, state: FSMContext):
    async with get_db() as session:
        events = await get_cached_active_events(session)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=get_events_kb(events)
        )
        await state.set_state(EditQuestions.EVENT)


@router.callback_query(EditQuestions.EVENT)
async def select_question_to_edit(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[1])
    await callback.answer()

    async with get_db() as session:
        questions = await get_cached_questions(session, event_id)

    await state.update_data(event_id=event_id)

    if questions:
        keyboard = create_question_keyboard(questions)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard
        )
        await state.set_state(EditQuestions.QUESTION)

    else:
        await callback.message.edit_text(
            "‚ùó –£ –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –î–∞–≤–∞–π—Ç–µ –∏—Ö –¥–æ–±–∞–≤–∏–º!"
        )
        await state.update_data(questions=[])
        await callback.message.answer(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {MAX_QUESTIONS}.\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ /done —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤."
        )
        await state.set_state(AddQuestionsToEvent.question)


# –°–Ω–∞—á–∞–ª–∞ —è–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /done
@router.message(StateFilter(AddQuestionsToEvent.question), Command("done"))
async def finish_adding_questions_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    questions = data.get("questions", [])
    event_id = data["event_id"]

    if questions:
        async with get_db() as session:
            for order, question_text in enumerate(questions, 1):
                session.add(
                    Question(
                        event_id=event_id, question_text=question_text, order=order
                    )
                )
            await session.commit()

        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤.")
        await state.clear()
    else:
        await message.answer("‚ùå –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
        await state.clear()


# –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /done –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–∞
@router.message(
    StateFilter(AddQuestionsToEvent.question),
    F.text,
    ~Command("done"),  # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - —á—Ç–æ–±—ã —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –ù–ï —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –Ω–∞ –∫–æ–º–∞–Ω–¥—É /done
)
async def add_question_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    questions = data.get("questions", [])
    question_text = message.text.strip()

    if not question_text:
        await message.answer("‚ùóÔ∏è –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    if len(questions) >= MAX_QUESTIONS:
        await message.answer(
            f"üî¥ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ ({MAX_QUESTIONS}). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        )
        return

    questions.append(question_text)
    await state.update_data(questions=questions)

    await message.answer(
        f"‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω ({len(questions)}/{MAX_QUESTIONS}). "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ /done."
    )


@router.callback_query(EditQuestions.QUESTION)
async def edit_question_text(callback: types.CallbackQuery, state: FSMContext):
    question_id = int(callback.data.split("_")[1])

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –ë–î —á–µ—Ä–µ–∑ SQLAlchemy session.get()
    async with get_db() as session:
        question = await session.get(Question, question_id)

    current_text = question.question_text if question else "‚ùóÔ∏è–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."

    await callback.answer(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ {question_id}")

    await state.update_data(question_id=question_id)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ—Å–∏–º –≤–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π
    await callback.message.edit_text(
        f"‚ùî –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:\n\n"
        f"<i>{current_text}</i>\n\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:",
        parse_mode="HTML",
    )

    await state.set_state(EditQuestions.TEXT)


@router.message(EditQuestions.TEXT)
async def save_question_text(message: Message, state: FSMContext):
    data = await state.get_data()
    async with get_db() as session:
        await Question.update_question(session, data["question_id"], message.text)
        logger.info(
            f"–í–æ–ø—Ä–æ—Å {data['question_id']} –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}. –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {message.text}"
        )
        clear_all_cache()
    await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.clear()

# endregion
# ---------------------------------------------------------


# ---------------------------------------------------------
# region Command("export_answers")
# ---------------------------------------------------------
@router.message(Command("export_answers"))
async def export_answers(
    message: Message, state: FSMContext
):  # <-- –¥–æ–±–∞–≤–ª—è–µ–º state —Å—é–¥–∞
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞—á–∞–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤.")
    async with get_db() as session:
        events = await Event.get_active_events_with_questions_and_answers(session)
        if not events:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.")
            return
        await state.set_state(ExportAnswers.event)  # ‚ö†Ô∏è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=get_events_kb(events)
        )
        logger.info(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∞–¥–º–∏–Ω—É {message.from_user.id} –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤."
        )


@router.callback_query(lambda c: c.data.startswith("event_"))
async def process_event_selection(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[1])
    current_state = await state.get_state()

    if current_state == ViewRegistrations.event:
        await show_registrations(callback, state)
    elif current_state == CancelEvent.event:
        await select_event_to_cancel(callback, state)
    elif current_state == SetWelcomeVideo.SELECT_EVENT:
        await select_event_for_video(callback, state)
    elif current_state == EditQuestions.EVENT:
        await select_question_to_edit(callback, state)
    elif current_state == ExportAnswers.event:
        await process_export(callback, state)
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")


async def process_export(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[1])

    async with get_db() as session:
        event = await get_cached_event_by_id(session, event_id)

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã —Å —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
        answers = await Answer.get_answers_for_event(session, event_id)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ User ID
    data = defaultdict(dict)
    sorted_questions = []  # –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

    for user_id, question_text, answer_text in answers:
        data[user_id][question_text] = answer_text
        if question_text not in sorted_questions:
            sorted_questions.append(
                question_text
            )  # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è

    # DataFrame —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø—É—Å—Ç—ã–º–∏ —è—á–µ–π–∫–∞–º–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    df = pd.DataFrame.from_dict(data, orient="index", columns=sorted_questions)
    df.index.name = "User ID"

    try:
        # –°–æ–∑–¥–∞—ë–º Excel-—Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä–µ –ø–∞–º—è—Ç–∏
        excel_buffer = io.BytesIO()
        with pd.ExcelWriter(excel_buffer, engine="xlsxwriter") as writer:  # type: ignore
            df.to_excel(writer, sheet_name="–û—Ç–≤–µ—Ç—ã")

        excel_buffer.seek(0)

        # –ì–æ—Ç–æ–≤–∏–º —Ñ–∞–π–ª –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
        excel_file = types.BufferedInputFile(
            excel_buffer.getvalue(),
            filename=f"–∞–Ω–∫–µ—Ç—ã_{event.event_date.strftime('%Y-%m-%d')}_{event.name}.xlsx",
        )

        await callback.answer(
            f"üóÉ –ê–Ω–∫–µ—Ç—ã –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event.event_date.strftime('%Y-%m-%d')} {event.name} –±—ã–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel."
        )
        await callback.message.edit_text("üóÉ –§–∞–π–ª –ê–Ω–∫–µ—Ç—ã –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
        await callback.message.answer_document(excel_file, caption="üìÑ –ê–Ω–∫–µ—Ç—ã (Excel)")

    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event_id}: {e}"
        )
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç–≤–µ—Ç–æ–≤.")
    finally:
        await state.clear()


# endregion
# ---------------------------------------------------------


# ---------------------------------------------------------
# region ViewRegistrations event
# ---------------------------------------------------------
@router.message(Command("view_registrations"))
async def view_registrations(message: Message, state: FSMContext):
    logger.info(
        f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."
    )
    async with get_db() as session:
        events = await get_cached_active_events(session)
        if events:
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=get_events_kb(events)
            )
            await state.set_state(ViewRegistrations.event)
            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∞–¥–º–∏–Ω—É {message.from_user.id} –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π."
            )
        else:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")


@router.callback_query(ViewRegistrations.event)
async def show_registrations(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[1])
    await callback.answer(
        f"–ê–¥–º–∏–Ω {callback.from_user.id} –≤—ã–±—Ä–∞–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id}"
    )
    async with get_db() as session:
        registrations = await Registration.get_registrations_info(session, event_id)
        event = await get_cached_event_by_id(
            session, event_id
        )  # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è

    event_date_str = event.event_date.strftime("%d.%m.%Y %H:%M")

    if registrations:
        users_list = "\n".join(
            [f"üë§ {reg.first_name} {reg.last_name}" for reg in registrations]
        )
        await callback.message.edit_text(
            f"üìÖ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> {event.name}\n\nüóì <b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> {event_date_str}\n\n"
            f"<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n{users_list}",
            parse_mode="HTML",
        )
    else:
        await callback.message.edit_text(
            f"üìÖ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> {event.name}\n\nüóì <b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> {event_date_str}\n\n"
            "–ù–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è.",
            parse_mode="HTML",
        )

    await state.clear()


# endregion
# ---------------------------------------------------------


# ---------------------------------------------------------
# region AddAdmin(StatesGroup)
# ---------------------------------------------------------
@router.message(Command("add_admin"))
async def add_admin(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:")
    await state.set_state(AddAdmin.user_id)


@router.message(AddAdmin.user_id)
async def process_admin_user_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        await state.set_state(AddAdmin.password)
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —É–∫–∞–∑–∞–ª ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞: {user_id}.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
        logger.error(
            f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID: {message.text}"
        )


@router.message(AddAdmin.password)
async def process_admin_password(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        async with get_db() as session:
            await User.add_admin(session, data["user_id"], message.text)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {data['user_id']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}: {e}"
        )
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    else:
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        logger.info(
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {data['user_id']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}."
        )
        await state.clear()


# endregion
# ---------------------------------------------------------


# ---------------------------------------------------------
# region ChangePassword(StatesGroup)
# ---------------------------------------------------------
@router.message(Command("change_password"))
async def change_password(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è.")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:")
    await state.set_state(ChangePassword.old_password)


@router.message(ChangePassword.old_password)
async def process_old_password(message: Message, state: FSMContext):
    async with get_db() as session:
        user = await session.get(User, message.from_user.id)
        if user and user.verify_password(message.text):
            await state.update_data(old_password=message.text)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
            await state.set_state(ChangePassword.new_password)
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
            await state.clear()


@router.message(ChangePassword.new_password)
async def process_new_password(message: Message, state: FSMContext):
    async with get_db() as session:
        await User.update_admin_password(session, message.from_user.id, message.text)
    await message.answer("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    await state.clear()


# endregion
# ---------------------------------------------------------


# ---------------------------------------------------------
# region CancelEvent(StatesGroup)
# ---------------------------------------------------------
@router.message(Command("cancel_event"))
async def cancel_event(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    async with get_db() as session:
        events = await get_cached_active_events(session)
        if events:
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=get_events_kb(events)
            )
            await state.set_state(CancelEvent.event)
            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∞–¥–º–∏–Ω—É {message.from_user.id} –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
        else:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")


@router.callback_query(CancelEvent.event)
async def select_event_to_cancel(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[1])
    await callback.answer(
        f"–ê–¥–º–∏–Ω {callback.from_user.id} –≤—ã–±—Ä–∞–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id}"
    )
    await state.update_data(event_id=event_id)
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
        reply_markup=get_cancel_confirmation_kb(event_id),
    )
    await state.set_state(CancelEvent.confirmation)


@router.callback_query(CancelEvent.confirmation)
async def confirm_cancellation(
    callback: types.CallbackQuery, state: FSMContext, bot: Bot
):
    if callback.data.startswith("cancel_confirm_"):
        event_id = int(callback.data.split("_")[2])
        await callback.answer(
            f"–ê–¥–º–∏–Ω {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id}"
        )
        async with get_db() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            registrations = await Registration.get_registrations_info(session, event_id)
            users = [reg.user_id for reg in registrations]

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ (–Ω—É–∂–Ω–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤)
            event = await get_cached_event_by_id(session, event_id)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ notify_admins
            await notify_admins(bot, event)

            # –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            success = await Event.cancel_event(session, event_id)
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            clear_event_from_cache(event_id)

            if success:
                await callback.message.edit_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                for user_id in users:
                    try:
                        await bot.send_message(
                            user_id,
                            f"<b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> {event.name}\n\n"
                            f"<b>–î–∞—Ç–∞:</b> {event.event_date.strftime('%d.%m.%Y')}\n\n"
                            f"‚ö†Ô∏è <b>–û—Ç–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!</b> ‚ö†Ô∏è\n",
                            parse_mode="HTML",
                        )
                    except Exception as e:
                        logger.exception(
                            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
                        )

            else:
                await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    else:
        await callback.answer("–û—Ç–º–µ–Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await callback.message.edit_text("–û—Ç–º–µ–Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

    await state.clear()


# endregion
# ---------------------------------------------------------


# ---------------------------------------------------------
# region BroadcastMessage(StatesGroup)
# ---------------------------------------------------------
@router.message(Command("broadcast"))
async def broadcast(message: Message, state: FSMContext):
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ: "
        "\n - —Ç–µ–∫—Å—Ç,"
        "\n - —Ñ–æ—Ç–æ,"
        "\n - –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,"
        "\n - –∫—Ä—É–∂–æ—á–µ–∫"
        "\n–∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    )
    await state.set_state(BroadcastMessage.message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(BroadcastMessage.message)
async def process_broadcast_message(message: Message, state: FSMContext):
    msg_data = {}

    if message.photo:
        msg_data["photo"] = message.photo[-1].file_id
        msg_data["caption"] = message.html_text or ""
        msg_data["type"] = "photo"
    elif message.voice:
        msg_data["voice"] = message.voice.file_id
        msg_data["caption"] = message.html_text or ""
        msg_data["type"] = "voice"
    elif message.video_note:
        msg_data["video_note"] = message.video_note.file_id
        msg_data["caption"] = ""  # –∫—Ä—É–∂–æ—á–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ø–æ–¥–ø–∏—Å–∏
        msg_data["type"] = "video_note"
    elif message.video:
        msg_data["video"] = message.video.file_id
        msg_data["caption"] = message.html_text or ""
        msg_data["type"] = "video"
    elif message.text:
        msg_data["text"] = message.html_text
        msg_data["type"] = "text"
    else:
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
            "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫—Ä—É–∂–æ—á–µ–∫ –∏–ª–∏ –≤–∏–¥–µ–æ."
        )
        return

    await state.update_data(msg_data=msg_data)

    await message.answer(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:", reply_markup=get_broadcast_confirmation_kb()
    )
    await state.set_state(BroadcastMessage.confirmation)



@router.callback_query(BroadcastMessage.confirmation)
async def confirm_broadcast(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    if callback.data != "broadcast_confirm":
        await callback.answer("‚ùå –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...")
        await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º {callback.from_user.id}")
        await state.clear()
        return

    await callback.answer("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å —Ä–∞—Å—Å—ã–ª–∫–∏...")
    data = await state.get_data()
    msg_data = data["msg_data"]

    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –¥–æ–±–∞–≤–∏–ª –≤ –æ—á–µ—Ä–µ–¥—å —Ä–∞—Å—Å—ã–ª–∫—É —Ç–∏–ø–∞ '{msg_data['type']}'")

    async with get_db() as session:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        if msg_data["type"] == "text":
            await BroadcastQueue.add_to_queue(
                session,
                text=msg_data["text"],
                media_type="text"
            )
        elif msg_data["type"] == "photo":
            await BroadcastQueue.add_to_queue(
                session,
                text=msg_data["caption"],
                media_id=msg_data["photo"],
                media_type="photo"
            )
        elif msg_data["type"] == "voice":
            await BroadcastQueue.add_to_queue(
                session,
                text=msg_data["caption"],
                media_id=msg_data["voice"],
                media_type="voice"
            )
        elif msg_data["type"] == "video_note":
            await BroadcastQueue.add_to_queue(
                session,
                media_id=msg_data["video_note"],
                media_type="video_note"
            )
        elif msg_data["type"] == "video":
            await BroadcastQueue.add_to_queue(
                session,
                text=msg_data["caption"],
                media_id=msg_data["video"],
                media_type="video"
            )

    await callback.message.answer(
        "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å —Ä–∞—Å—Å—ã–ª–∫–∏. "
        "–û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )

    await state.clear()
# endregion
# ---------------------------------------------------------


# ---------------------------------------------------------
# region SetWelcomeVideo(StatesGroup)
# ---------------------------------------------------------
@router.message(Command("set_welcome_video"))
async def set_welcome_video(message: Message, state: FSMContext):
    logger.info(
        f"–ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ."
    )
    async with get_db() as session:
        events = await get_cached_active_events(session)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=get_events_kb(events)
        )
        await state.set_state(SetWelcomeVideo.SELECT_EVENT)


@router.callback_query(SetWelcomeVideo.SELECT_EVENT)
async def select_event_for_video(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[1])
    await callback.answer(f"–í—ã–±—Ä–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id}")
    async with get_db() as session:
        event = await session.get(Event, event_id)
    await callback.message.delete()
    if event and event.welcome_video_id:
        await callback.message.answer_video(
            video=event.welcome_video_id,
            caption=f"üìπ –¢–µ–∫—É—â–µ–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <b>¬´{event.name}¬ª</b>\n\n"
            "‚¨áÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã. ‚¨áÔ∏è",
            parse_mode="HTML",
        )
    else:
        await callback.message.answer(
            "‚ÑπÔ∏è –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–∫–∞ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ.\n\n"
            "‚¨áÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã. ‚¨áÔ∏è"
        )


    await state.update_data(event_id=event_id)
    await state.set_state(SetWelcomeVideo.GET_VIDEO)


@router.message(Command("cancel"))
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state is None:
        await message.answer("‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    await message.delete()
    await state.clear()
    await message.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@router.message(SetWelcomeVideo.GET_VIDEO, F.video | F.animation | F.video_note)
async def save_media(message: Message, state: FSMContext):
    media_id = None
    if message.video:
        media_id = message.video.file_id
    elif message.animation:
        media_id = message.animation.file_id
    elif message.video_note:
        media_id = message.video_note.file_id

    if not media_id:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, GIF –∏–ª–∏ –∫—Ä—É–∂–æ—á–µ–∫.")
        return

    data = await state.get_data()

    async with get_db() as session:
        success = await Event.set_welcome_video(session, data["event_id"], media_id)
        # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        clear_event_from_cache(data["event_id"])

    await message.delete()
    if success:
        await message.answer("‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞.")

    await state.clear()


# endregion
# ---------------------------------------------------------
