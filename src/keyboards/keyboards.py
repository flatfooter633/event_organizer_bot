from typing import List

from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.database.models import Event

admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ö–æ–º–∞–Ω–¥—ã")]], resize_keyboard=True
)

events_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")]],
    resize_keyboard=True,
    one_time_keyboard=True,
)


def create_inline_kb(
    buttons: list[tuple[str, str]], adjust: int = 2
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫.

    :param buttons: [(—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, callback-–¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏), ...]
    :param adjust: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    :return: InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()
    for text, callback_data in buttons:
        builder.button(text=text, callback_data=callback_data)
    builder.adjust(adjust)
    return builder.as_markup()


commands_keyboard = create_inline_kb(
    [
        ("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –†–∞—Å—Å—ã–ª–∫—É üì¢", "command_broadcast"),
        ("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üìÖ", "command_add_event"),
        ("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üìÖ", "command_cancel_event"),
        ("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚ùì", "command_edit_questions"),
        ("ü™Ñ –ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ üé¨", "command_set_welcome_video"),
        ("üì§ –í—ã–≥—Ä—É–∑–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ üìã", "command_export_answers"),
        ("üëì –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–æ–≤ üìú", "command_view_registrations"),
        ("‚úÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º ü•ã", "command_add_admin"),
        ("‚ôªÔ∏è –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ üîê", "command_change_password"),
        ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ üìº", "command_edit_settings"),
    ],
    adjust=1,
)

edit_setting_keyboard = create_inline_kb(
    [
        ("‚úèÔ∏è –í–∏–¥–µ–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üìΩ", "edit_setting_VIDEO_FILE_ID"),
        ("‚úèÔ∏è –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üìÉ", "edit_setting_START_MESSAGE"),
        ("‚úèÔ∏è –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞ üõ†", "edit_setting_ADMIN_COMMANDS_TEXT"),
    ],
    adjust=1,
)

digits_keyboard = create_inline_kb([(str(i), f"digit_{i}") for i in range(1, 4)])


def create_time_keyboard(
    start_hour: int = 8, end_hour: int = 22, buttons_per_row: int = 4
) -> InlineKeyboardMarkup:
    buttons = []
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏
    for hour in range(start_hour, end_hour + 1):
        buttons.append((f"{hour:02}:00", f"time_{hour:02}:00"))
        buttons.append((f"{hour:02}:30", f"time_{hour:02}:30"))

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º create_inline_kb –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return create_inline_kb(buttons, buttons_per_row)


def active_events_kb(events: List[Event]):
    return create_inline_kb(
        [(event.name, f"register_{event.id}") for event in events], adjust=1
    )


def get_registration_kb(event_id):
    return create_inline_kb([("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", f"register_{event_id}")])


def get_events_kb(events):
    return create_inline_kb(
        [(event.name, f"event_{event.id}") for event in events], adjust=1
    )


def get_confirm_kb():
    return create_inline_kb([("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "confirm"), ("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel")])


def get_cancel_confirmation_kb(event_id):
    return create_inline_kb(
        [
            ("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", f"cancel_confirm_{event_id}"),
            ("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_reject"),
        ]
    )


def get_broadcast_confirmation_kb():
    return create_inline_kb(
        [
            ("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", "broadcast_confirm"),
            ("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "broadcast_cancel"),
        ]
    )


def get_registration_confirmation_kb(event_id):
    return create_inline_kb(
        [
            ("‚úÖ –î–∞", f"confirm_yes_{event_id}"),
            ("‚ùå –ù–µ—Ç", "confirm_no"),
        ]
    )


def create_question_keyboard(questions):
    return create_inline_kb(
        [(question.question_text, f"question_{question.id}") for question in questions],
        adjust=1,
    )
