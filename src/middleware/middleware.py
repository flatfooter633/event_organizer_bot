import asyncio

from aiogram import BaseMiddleware
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, TelegramObject, CallbackQuery

from src.config.logger_config import logger
from src.database.database import get_db
from src.database.models import check_admin_cached
from src.states.states import AdminAuth

ADMIN_COMMANDS = frozenset(
    [
        "/add_event",
        "/cancel_event",
        "/broadcast",
        "/edit_questions",
        "/add_admin",
        "/change_password",
        "/set_welcome_video",
        "/edit_settings",
    ]
)


def log_user_action(user_id: int, action: str, his: bool = False):
    logger.info(f"{"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if not his else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"}  {user_id} {action}")


async def async_log_user_action(user_id: int, action: str, his: bool = False):
    await asyncio.to_thread(
        log_user_action,
        user_id,
        action,
        his=his,
    )


# ---------------------------------------------------------
# region AdminAuthMiddleware
# ---------------------------------------------------------
class AdminAuthMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: TelegramObject, data):
        if (
            isinstance(event, Message)
            and event.text
            and event.text.startswith(tuple(ADMIN_COMMANDS))
        ):
            user_id = event.from_user.id
            async with get_db() as session:
                is_admin = await check_admin_cached(session, user_id)
                if not is_admin:
                    logger.warning(
                        f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã {event.text}."
                    )
                    await event.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
                    return  # –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                await async_log_user_action(
                    event.from_user.id,
                    f"–Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã {event.text}. üîê –ó–∞–ø—Ä–æ—à–µ–Ω –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    his=False,
                )

                state: FSMContext = data["state"]
                await state.update_data(
                    original_command=event.text
                )  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–º–∞–Ω–¥—É
                await state.set_state(AdminAuth.password)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
                await event.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
                return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è

        # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
        return await handler(event, data)


# endregion
# ---------------------------------------------------------

# ---------------------------------------------------------
# region AdminCallbackMiddleware
# ---------------------------------------------------------


class AdminCallbackMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: TelegramObject, data):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ callback_query –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
        if (
            isinstance(event, CallbackQuery)
            and event.data
            and event.data.startswith("command_")
        ):
            user_id = event.from_user.id
            async with get_db() as session:
                is_admin = await check_admin_cached(session, user_id)
                if not is_admin:
                    logger.warning(
                        f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ callback {event.data}."
                    )
                    await event.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
                    return  # –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

                await async_log_user_action(
                    event.from_user.id,
                    f"–Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã {event.data}. üîê –ó–∞–ø—Ä–æ—à–µ–Ω –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    his=False,
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                state: FSMContext = data["state"]
                await state.update_data(
                    original_callback=event.data
                )  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π callback
                await state.set_state(AdminAuth.password)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–∞—Ä–æ–ª—è
                # –î–ª—è callback –º—ã –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å event.answer —Å —Ç–µ–∫—Å—Ç–æ–º,
                # –ø–æ—ç—Ç–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await event.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", show_alert=True)
                await event.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ callback
                return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è

        # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
        return await handler(event, data)


# endregion
# ---------------------------------------------------------
