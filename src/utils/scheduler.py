from asyncio import Semaphore, gather
from datetime import datetime, timedelta

from aiogram import Bot
from aiogram.exceptions import TelegramAPIError
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy.ext.asyncio import AsyncSession

from src.config.logger_config import logger
from src.database.database import get_db
from src.database.models import User, Event, Registration, BroadcastQueue
from src.keyboards.keyboards import get_registration_kb

MAX_CONCURRENT_TASKS = 20  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —á–∏—Å–ª–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫


async def notify_admins(bot: Bot, event: Event):
    async with get_db() as session:
        admins = await User.get_all_admins(session)
        for admin in admins:
            message_text = (
                f"üîî <b>–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {event.name}\n\n"
                f"üóì <b>–î–∞—Ç–∞:</b> {event.event_date.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{event.description}</i>\n"
            )

            await safe_send_telegram(bot, admin.user_id, message_text)


async def send_reminder(
        bot: Bot, session: AsyncSession, event: Event, text: str, delta_days: int
):
    try:
        registered_users = set(
            await Registration.get_registered_users(session, event.id)
        )
        all_users = await User.get_all_user_ids(session)

        semaphore = Semaphore(MAX_CONCURRENT_TASKS)

        async def safe_send(user_id, message_text, keyboard):
            async with semaphore:
                await send_message_to_user(
                    bot, user_id, message_text, keyboard, event.name, delta_days
                )

        tasks = [
            safe_send(
                user_id,
                (
                    text
                    if user_id in registered_users
                    else f"{text}\n\n–•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?"
                ),
                None if user_id in registered_users else get_registration_kb(event.id),
            )
            for user_id in all_users
        ]
        await gather(*tasks)

    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (event_id={event.id})."
        )


async def safe_send_telegram(bot, chat_id, text, keyboard=None):
    try:
        await bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=keyboard)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {chat_id}: {e}")


async def send_message_to_user(
        bot: Bot,
        user_id: int,
        message_text: str,
        keyboard,
        event_name: str,
        delta_days: int,
):
    await safe_send_telegram(bot, user_id, message_text, keyboard)

    logger.info(
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_name} (—á–µ—Ä–µ–∑ {delta_days} –¥–Ω–µ–π)."
    )


async def should_send_reminder(event: Event, reminder_type: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    return not getattr(event, reminder_type)


async def mark_reminder_sent(session, event: Event, reminder_type: str):
    """–û—Ç–º–µ—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î"""
    setattr(event, reminder_type, True)
    await session.commit()


def russian_plural(n: int, variants: tuple[str, str, str]) -> str:
    if 10 <= n % 100 <= 20:
        return variants[2]
    if n % 10 == 1:
        return variants[0]
    if 2 <= n % 10 <= 4:
        return variants[1]
    return variants[2]


def format_time_difference(diff: timedelta) -> str:
    days = diff.days
    hours = diff.seconds // 3600
    minutes = (diff.seconds % 3600) // 60

    parts = []

    if days > 0:
        parts.append(f"{days} {russian_plural(days, ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'))}")

    if hours > 0:
        parts.append(f"{hours} {russian_plural(hours, ('—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'))}")

    if days == 0 and minutes > 0:  # –º–∏–Ω—É—Ç—ã –µ—Å–ª–∏ –º–µ–Ω–µ–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å
        parts.append(
            f"{minutes} {russian_plural(minutes, ('–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'))}"
        )

    return ", ".join(parts)


REMINDER_CONFIGS = [
    (timedelta(days=7), "reminder_week", "–¥–Ω–µ–π"),
    (timedelta(days=3), "reminder_3days", "–¥–Ω—è"),
    (timedelta(hours=24), "reminder_day", "—á–∞—Å–∞"),
    (timedelta(hours=7), "reminder_hours", "—á–∞—Å–æ–≤"),
    (timedelta(hours=4), "reminder_hour", "—á–∞—Å–∞"),
]


async def send_event_reminders(bot, session, event, now):
    diff = event.event_date - now

    for interval, reminder_field, _ in REMINDER_CONFIGS:
        if interval >= diff > interval - timedelta(
                hours=2
        ) and await should_send_reminder(event, reminder_field):
            formatted_diff = format_time_difference(diff)
            message = (
                f"üí° <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> {event.name}\n\n"
                f"<i>{event.description}</i>\n\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {event.event_date:%d.%m.%Y %H:%M}\n\n"
                f"‚è∞ –ù–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {formatted_diff}!"
            )
            await send_reminder(bot, session, event, message, interval.days)
            await mark_reminder_sent(session, event, reminder_field)


async def check_events(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    now = datetime.now()
    async with get_db() as session:
        events = await Event.get_active_events(session)  # –ù–æ–≤—ã–π –º–µ—Ç–æ–¥
        for event in events:
            await send_event_reminders(bot, session, event, now)

            if now > event.event_date + timedelta(hours=1):
                event.status = "completed"
                await notify_admins(bot, event)
                await session.commit()
                logger.info(f"–°–æ–±—ã—Ç–∏–µ '{event.name}' –æ—Ç–º–µ—á–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º.")


async def get_pending_data_for_single_broadcast():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ –æ–∂–∏–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –µ–¥–∏–Ω–∏—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    async with get_db() as session:
        # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ –æ–¥–Ω—É —Ä–∞—Å—Å—ã–ª–∫—É)
        pending_message = await BroadcastQueue.get_pending_messages(session, limit=1)
        if pending_message:
            pending_message = pending_message[0]
        else:
            pending_message = None

        users = await User.get_all_user_ids(session)

    return users, pending_message



async def process_single_broadcast_message(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    logger.info(f"–ó–∞–ø—É—Å–∫ –µ–¥–∏–Ω–∏—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
    try:
        users, message = await get_pending_data_for_single_broadcast()

        if not message:
            logger.info("–û—á–µ—Ä–µ–¥—å —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—É—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ.")
            return

        async with get_db() as session:
            success, errors = 0, 0
            semaphore = Semaphore(MAX_CONCURRENT_TASKS)

            async def send_to_user(user_id):
                nonlocal success, errors
                async with semaphore:
                    try:
                        if message.media_type == "photo":
                            await bot.send_photo(
                                user_id,
                                message.media_id,
                                caption=message.text or "",
                                parse_mode="HTML"
                            )
                        elif message.media_type == "voice":
                            await bot.send_voice(
                                user_id,
                                message.media_id,
                                caption=message.text or "",
                                parse_mode="HTML"
                            )
                        elif message.media_type == "video_note":
                            await bot.send_video_note(user_id, message.media_id)
                        elif message.media_type == "video":
                            await bot.send_video(
                                user_id,
                                message.media_id,
                                caption=message.text or "",
                                parse_mode="HTML"
                            )
                        else:
                            await bot.send_message(user_id, message.text, parse_mode="HTML")

                        success += 1
                    except (TelegramAPIError, Exception) as exception:
                        errors += 1
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {exception}")

            tasks = [send_to_user(user_id) for user_id in users]
            await gather(*tasks)

            # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            await BroadcastQueue.mark_as_sent(session, message.id)

            logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ID {message.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ - {success}, –æ—à–∏–±–∫–∏ - {errors}")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–¥–∏–Ω–∏—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")



def setup_scheduler(bot: Bot):
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        check_events,
        "interval",
        minutes=20,
        args=[bot],
        next_run_time=datetime.now() + timedelta(seconds=10),
    )
    # –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    scheduler.add_job(
        process_single_broadcast_message,
        trigger='cron',
        hour=9, minute=0,  # –∑–∞–ø—É—Å–∫ –≤ 9:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
        args=[bot],
    )
    scheduler.add_job(
        process_single_broadcast_message,
        trigger='cron',
        hour=10, minute=0,  # –∑–∞–ø—É—Å–∫ –≤ 10:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
        args=[bot],
    )

    scheduler.add_job(
        process_single_broadcast_message,
        trigger='cron',
        hour=19, minute=0,  # –∑–∞–ø—É—Å–∫ –≤ 19:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
        args=[bot],
    )

    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω.")
    return scheduler
